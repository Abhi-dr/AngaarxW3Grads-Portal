# ========================================= MY SESSIONS =========================================

@login_required(login_url="login")
def my_sessions(request):
    
    sessions = Session.objects.filter(course__in=request.user.student.courses.all()).order_by("-session_time")
    
    query = request.POST.get("query")
    if query:
        sessions = sessions.filter(
            Q(topic__icontains=query)|
            Q(course__name__icontains=query) |
            Q(instructor__first_name__icontains=query) |
            Q(instructor__last_name__icontains=query) |
            Q(id__icontains=query)
            )
        
    parameters = {
        "sessions": sessions,
        "query": query 
    }
    
    return render(request, "student/my_sessions.html", parameters)

# =========================================== READING MATERIAL ========================================

@login_required(login_url="login")
def reading_material(request):
    
    notes = Notes.objects.filter(course__in=request.user.student.courses.all())
    
    parameters = {
        "notes": notes
    }
    
    return render(request, "student/reading_material.html", parameters)



# =========================================== ASSIGNMENTS =============================================

@login_required(login_url="login")
def assignments(request):
    
    assignments= Assignment.objects.filter(course__in=request.user.student.courses.all())
    student = request.user.student
    submissions = AssignmentSubmission.objects.filter(student=student)
    
    submitted_assignments = submissions.values_list('assignment_id', flat=True)
    current_time = timezone.now()

    
    parameters = {
        "assignments": assignments,
        "student": student,
        "submitted_assignments": submitted_assignments,
        "current_time": current_time,
        "submissions": submissions
    }
    
    return render(request, "student/assignments.html", parameters)


# =========================================== SUBMIT ASSIGNMENT =============================================

@login_required(login_url="login")
def submit_assignment(request, assignment_id):
    assignment = get_object_or_404(Assignment, id=assignment_id)
    student = request.user.student
    
    if AssignmentSubmission.objects.filter(assignment=assignment, student=student).exists() or assignment.due_date < timezone.now():
        messages.error(request, "Beta jab tumne URL dekha bhi nhi tha tbse isse khel rhe hain humðŸ”¥")
        return redirect('assignments')

    if request.method == 'POST':
        submission = AssignmentSubmission(
            assignment=assignment,
            student=student,
        )
        
        if assignment.assignment_type == 'Coding':
            submission.submission_code = request.POST.get('submission_code')
        elif assignment.assignment_type == 'Text':
            submission.submission_text = request.POST.get('submission_text')
        elif assignment.assignment_type == 'File':
            submission.submission_file = request.FILES.get('submission_file')
        elif assignment.assignment_type == 'Image':
            submission.submission_image = request.FILES.get('submission_image')
        elif assignment.assignment_type == 'Link':
            submission.submission_link = request.POST.get('submission_link')
        
        submission.extra_info = request.POST.get('extra_info')
        
        try:
            submission.save()
            messages.success(request, "Assignment submitted successfully.")
            return redirect('assignments')
        except ValueError as e:
            messages.error(request, str(e))
    
    
    parameters = {
        "assignment": assignment,
        'student': student
    }
    
    return render(request, "student/submit_assignment.html", parameters)


# =========================================== VIEW SUBMISSION =============================================

@login_required(login_url="login")
def view_submission(request, assignment_id):
    assignment = get_object_or_404(Assignment, id=assignment_id)
    submission = get_object_or_404(AssignmentSubmission, assignment=assignment, student=request.user)
    
    parameters = {
        'assignment': assignment,
        'submission': submission
    }
    
    return render(request, 'student/view_submission.html', parameters)

# =========================================== DELETE SUBMISSION =============================================

@login_required(login_url="login")
def delete_submission(request, submission_id):
    
    # check if the deadline is passed
    
    if AssignmentSubmission.objects.get(id=submission_id).assignment.due_date < timezone.now():
        messages.error(request, "You cannot delete the submission after the deadline.")
        return redirect('assignments')
    
    submission = get_object_or_404(AssignmentSubmission, id=submission_id)
    submission.delete()
    
    messages.success(request, "Submission deleted successfully.")
    
    return redirect('assignments')


# =========================================== ROADMAP =============================================

@login_required(login_url="login")
def roadmap(request):
    
    courses = request.user.student.courses.all()
    
    parameters = {
        "courses": courses
    }
    
    return render(request, "student/roadmap.html", parameters)


# =========================================== VIEW ROADMAP =============================================

@login_required(login_url="login")
def view_roadmap(request, course_id):
        
    course = Course.objects.get(id=course_id)
    roadmaps = course.roadmap_set.all()
    
    parameters = {
        "course": course,
        "roadmaps": roadmaps
    }
    
    return render(request, "student/view_roadmap.html", parameters)

========================================== ADMINISTRATION =============================================


# ======================================== SESSIONS ==========================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def instructor_sessions(request):
    
    instructor = Instructor.objects.get(id=request.user.id)

    sessions = Session.objects.filter(instructor=instructor).order_by("-session_time")
    
    query = request.POST.get("query")
    if query:
        sessions = Session.objects.filter(
            Q(id__icontains=query) |
            Q(topic__icontains=query) | 
            Q(instructor__first_name__icontains=query) | 
            Q(instructor__last_name__icontains=query)
            )
    
    parameters = {
        "instructor": instructor,
        "sessions": sessions,
        "query": query
    }
    
    return render(request, "administration/instructor_sessions.html", parameters)

# ======================================== ADD SESSION ==========================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def add_session(request):
    
    instructor = Instructor.objects.get(id=request.user.id)
    
    if request.method == "POST":
        
        session = Session()
        
        session.topic = request.POST.get("topic")
        session.session_time = request.POST.get("session_time")
        session.link = request.POST.get("link")
        session.course = Course.objects.get(instructor=instructor)
        session.instructor = instructor
        
        session.save()
        
        messages.success(request, "Session added successfully!")
        
        return redirect("instructor_sessions")
    
    course = Course.objects.get(instructor=instructor)
    
    parameters = {
        "instructor": instructor,
        "course": course
    }
    
    return render(request, "administration/add_session.html", parameters)


# ======================================== EDIT SESSION ==========================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def edit_session(request, id):
    
    instructor = Instructor.objects.get(id=request.user.id)
    
    session = Session.objects.get(id=id)
    
    if request.method == "POST":
        
        session.topic = request.POST.get("topic")
        session.session_time = request.POST.get("session_time")
        session.link = request.POST.get("link")
        
        session.save()
        
        messages.success(request, "Session updated successfully!")
        
        return redirect("instructor_sessions")
    
    course = Course.objects.get(instructor=instructor)

    
    parameters = {
        "instructor": instructor,
        "session": session,
    }
    
    return render(request, "administration/edit_session.html", parameters)


# ======================================== MARK SESSION COMPLETED ==========================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def mark_session_completed(request, id):
    
    session = Session.objects.get(id=id)
    
    session.is_completed = True
    session.save()
    
    messages.success(request, "Session marked as completed successfully!")
    
    return redirect("instructor_sessions")

# ========================================== UPLOAD RECORDING ==========================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def upload_recorded_session(request):
    if request.method == 'POST':
        session_id = request.POST.get('session_id')
        recorded_session_link = request.POST.get('recorded_session_link')
        try:
            session = Session.objects.get(id=session_id)
            session.recorded_session_link = recorded_session_link
            session.save()
            messages.success(request, 'Recorded session link uploaded successfully.')
        except Session.DoesNotExist:
            messages.error(request, 'Session not found.')
    return redirect('instructor_sessions')


# ================================================================================================
# ========================================= ASSIGNMENTS WORK =====================================
# ================================================================================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def instructor_assignments(request):
        
    instructor = Instructor.objects.get(id=request.user.id)
    course = Course.objects.get(instructor=instructor)
    
    assignments = Assignment.objects.filter(course=course)
    
    query = request.POST.get("query")
    if query:
        assignments = Assignment.objects.filter(
            Q(id__icontains=query) |
            Q(title__icontains=query) |
            Q(description__icontains=query)|
            Q(assignment_type__icontains=query)
            )
    
    parameters = {
        "instructor": instructor,
        "assignments": assignments,
        "query": query
    }
    
    return render(request, "administration/assignments.html", parameters)


# ======================================== ADD ASSIGNMENT ========================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def add_assignment(request):
        
    instructor = Instructor.objects.get(id=request.user.id)
    course = Course.objects.get(instructor=instructor)
    
    if request.method == "POST":
        
        try:
            
            assignment = Assignment()
            
            assignment.title = request.POST.get("title")
            assignment.description = request.POST.get("description")
            assignment.assignment_type = request.POST.get("assignment_type")
            assignment.due_date = request.POST.get("due_date")
            assignment.course = course
            
            assignment.save()
            
            messages.success(request, "Assignment added successfully!")
            
            return redirect("instructor_assignments")
        
        except Exception as e:
            messages.error(request, f"Error: {e}")
            return redirect("instructor_assignments")
    
    parameters = {
        "instructor": instructor,
        "course": course
    }
    
    return render(request, "administration/add_assignment.html", parameters)

# ======================================== DELETE ASSIGNMENT ===================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def delete_assignment(request, id):
        
    assignment = Assignment.objects.get(id=id)
    assignment.delete()
    
    messages.success(request, "Assignment deleted successfully!")
    
    return redirect("instructor_assignments")


# ======================================== VIEW SUBMISSIONS ===================================

@login_required(login_url='login')
@staff_member_required(login_url='login')
def view_submissions(request, id):
            
    instructor = Instructor.objects.get(id=request.user.id)
    assignment = Assignment.objects.get(id=id)
    
    submissions = AssignmentSubmission.objects.filter(assignment=assignment)
        
    query = request.POST.get("query")
    if query:
        submissions = AssignmentSubmission.objects.filter(
            Q(id__icontains=query) |
            Q(student__first_name__icontains=query) |
            Q(student__last_name__icontains=query)
            )
    
    parameters = {
        "instructor": instructor,
        "assignment": assignment,
        "submissions": submissions,
        "query": query
    }
    
    return render(request, "administration/submissions.html", parameters)


# ======================================== SCRUM MEETINGS =======================================

@login_required(login_url="login")
@staff_member_required(login_url="login")
def scrum_meetings(request):
    
    instructor = Instructor.objects.get(id=request.user.id)
    
    scrum_meetings = ScrumMeeting.objects.all().order_by("-date")
    
    parameters = {
        "instructor": instructor,
        "scrum_meetings": scrum_meetings
    }
    
    return render(request, "administration/scrum_meetings.html", parameters)


# ======================================== MARK ATTENDANCE ======================================

@login_required(login_url="login")
@staff_member_required(login_url="login")
def mark_attendance(request, meeting_id):
    
    instructor = Instructor.objects.get(id=request.user.id)
    
    meeting = get_object_or_404(ScrumMeeting, id=meeting_id)
    
    # GPT KA KMAAL H YE...
    # students = Student.objects.filter(courses__instructor=instructor).annotate(
    #     attended=Case(
    #         When(attendance__scrum_meeting=meeting, attendance__attended=True, then=Value(True)),
    #         default=Value(False),
    #         output_field=BooleanField()
    #     )
    # ).distinct().order_by('attended')
    from django.db.models import Case, When, Value, BooleanField, OuterRef, Subquery

        
    attendance_subquery = Attendance.objects.filter(
        scrum_meeting=meeting,
        student=OuterRef('pk'),
        attended=True
    ).values('attended')[:1]

    # Annotating students with their attendance status and ensuring each student appears only once
    students = Student.objects.filter(courses__instructor=instructor).annotate(
        attended=Case(
            When(Subquery(attendance_subquery), then=Value(True)),
            default=Value(False),
            output_field=BooleanField()
        )
    ).order_by('attended')
    

    
    query = request.POST.get("query")
    if query:
        students = Student.objects.filter(
            Q(id__icontains=query) |
            Q(first_name__icontains=query) | 
            Q(last_name__icontains=query) | 
            Q(email__icontains=query)
            )
        
    if request.method == 'POST' and 'attendance_form' in request.POST:
        for student in students:
            attended = request.POST.get(f'attendance_{student.id}') == 'on'
            
            if Attendance.objects.filter(scrum_meeting=meeting, student=student).exists():
                attendance = Attendance.objects.get(scrum_meeting=meeting, student=student)
                attendance.attended = attended
                attendance.save()
            
            else:
                attendance = Attendance()
                attendance.scrum_meeting = meeting
                attendance.student = student
                attendance.attended = attended
                attendance.save()
        
        messages.success(request, "Attendance Marked Successfully!")
        return redirect('mark_attendance', meeting_id=meeting_id)
    
    
    attendances = {a.student.id: a.attended for a in Attendance.objects.filter(scrum_meeting=meeting, attended=True)}
        
    parameters = {
        "instructor": instructor,
        'meeting': meeting, 
        'students': students, 
        'attendances': attendances
    }
    
    return render(request, 'administration/mark_attendance.html', parameters)


# ======================================== ADD SCRUM MEETING ======================================

@login_required(login_url="login")
@staff_member_required(login_url="login")
def add_scrum(request):
        
    instructor = Instructor.objects.get(id=request.user.id)
    
    if request.method == 'POST':
        
        try:
            scrum = ScrumMeeting()
            scrum.name = request.POST.get('name')
            scrum.date = request.POST.get('date')
            scrum.description = request.POST.get('description')
            scrum.save()
            
            messages.success(request, 'Scrum Meeting Added Successfully!')
        
        except Exception as e:
            messages.error(request, f'Error: {e}')
            
        return redirect('scrum_meetings')
            
            
    parameters = {
        "instructor": instructor
    }
    
    return render(request, "administration/add_scrum.html", parameters)


# ======================================== DELETE SCRUM MEETING ======================================

@login_required(login_url="login")
@staff_member_required(login_url="login")
def delete_scrum(request, id):
        
    scrum = ScrumMeeting.objects.get(id=id)
    scrum.delete()
    
    messages.success(request, "Scrum Meeting deleted successfully!")
    
    return redirect("scrum_meetings")




