from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.db.models import Count, Q
from django.views.decorators.http import require_POST
from django.core.mail import EmailMultiAlternatives
from django.contrib import messages
from home.models import FlamesCourse, FlamesRegistration, FlamesCourseTestimonial, FlamesTeam, Alumni, FlamesTeamMember
from accounts.models import Instructor, Student

@login_required
def flames_courses(request):
    """
    Admin view for managing FLAMES courses
    """
    courses = FlamesCourse.objects.all()
    
    # Count stats
    total_courses = courses.count()
    
    total_registrations = FlamesRegistration.objects.count()
    total_completed_registrations = FlamesRegistration.objects.filter(status="Completed").count()
    total_pending_registrations = FlamesRegistration.objects.filter(status="Pending").count()
    
    total_amount = FlamesRegistration.get_total_amount()
    
    context = {
        'courses': courses,
        'total_courses': total_courses,
        
        'total_registrations': total_registrations,
        'total_completed_registrations': total_completed_registrations,
        'total_pending_registrations': total_pending_registrations,
        
        'total_amount': total_amount,
    }
    
    return render(request, 'administration/flames/courses.html', context)


@login_required
def flames_registrations(request):
    """
    Admin view for managing FLAMES registrations with filtering capability
    """
    registrations = FlamesRegistration.objects.all().select_related('course', 'user', 'team')
    courses = FlamesCourse.objects.all()
    
    # Get stats for dashboard
    total_registrations = registrations.count()
    pending_registrations = registrations.filter(status="Pending").count()
    approved_registrations = registrations.filter(status="Approved").count()
    completed_registrations = registrations.filter(status="Completed").count()
    
    # Get unique colleges for filter (from student profiles)
    colleges = registrations.filter(user__isnull=False).values_list('user__college', flat=True).distinct()
    
    context = {
        'registrations': registrations,
        'courses': courses,
        'colleges': colleges,
        'total_registrations': total_registrations,
        'pending_registrations': pending_registrations,
        'approved_registrations': approved_registrations,
        'completed_registrations': completed_registrations,
    }
    
    return render(request, 'administration/flames/registrations.html', context)


@login_required
def admin_course_detail(request, course_id):
    """
    View a specific course details in admin panel
    """
    course = get_object_or_404(FlamesCourse, id=course_id)
    registrations = FlamesRegistration.objects.filter(course=course)
    testimonials = FlamesCourseTestimonial.objects.filter(course=course)
    
    context = {
        'course': course,
        'registrations': registrations,
        'testimonials': testimonials,
        'registration_count': registrations.count(),
    }
    
    return render(request, 'administration/flames/course_detail.html', context)


@login_required
def admin_add_course(request):
    """
    Add a new FLAMES course
    """
    if request.method == 'POST':
        # Extract form data
        title = request.POST.get('title')
        subtitle = request.POST.get('subtitle')
        slug = request.POST.get('slug')
        description = request.POST.get('description')
        what_you_will_learn = request.POST.get('what_you_will_learn')
        roadmap = request.POST.get('roadmap')
        icon_class = request.POST.get('icon_class')
        icon_color = request.POST.get('color')
        button_color = request.POST.get('button_color')
        instructor_name = request.POST.get('instructor')
        price = request.POST.get('price')
        discount_price = request.POST.get('discount_price') or None
        is_active = 'is_active' in request.POST
        
        try:
            instructor = Instructor.objects.get(name=instructor_name)
        except:
            instructor = None
        
        # Create the course
        course = FlamesCourse.objects.create(
            title=title,
            subtitle=subtitle,
            slug=slug,
            description=description,
            what_you_will_learn=what_you_will_learn,
            roadmap=roadmap,
            icon_class=icon_class,
            color=icon_color,
            button_color=button_color,
            instructor=instructor,
            price=price,
            discount_price=discount_price,
            is_active=is_active
        )
        
        return redirect('admin_flames_courses')
    
    # Get data for form
    instructors = Instructor.objects.all()
    
    context = {
        'instructors': instructors,
    }
    
    return render(request, 'administration/flames/add_course.html', context)


@login_required
def admin_edit_course(request, course_id):
    """
    Edit an existing FLAMES course
    """
    course = get_object_or_404(FlamesCourse, id=course_id)
    
    if request.method == 'POST':
        # Extract form data
        title = request.POST.get('title')
        subtitle = request.POST.get('subtitle')
        slug = request.POST.get('slug')
        description = request.POST.get('description')
        what_you_will_learn = request.POST.get('what_you_will_learn')
        roadmap = request.POST.get('roadmap')
        icon_class = request.POST.get('icon_class')
        icon_color = request.POST.get('color')
        button_color = request.POST.get('button_color')
        instructor_name = request.POST.get('instructor')
        price = request.POST.get('price')
        discount_price = request.POST.get('discount_price') or None
        is_active = 'is_active' in request.POST
        
        try:
            instructor = Instructor.objects.get(name=instructor_name)
        except:
            instructor = None
        
        # Update the course
        course.title = title
        course.subtitle = subtitle
        course.slug = slug
        course.description = description
        course.what_you_will_learn = what_you_will_learn
        course.roadmap = roadmap
        course.icon_class = icon_class
        course.color = icon_color
        course.button_color = button_color
        course.instructor = instructor
        course.price = price
        course.discount_price = discount_price
        course.is_active = is_active
        course.save()
        
        return redirect('admin_flames_courses')
    
    # Get data for form
    instructors = Instructor.objects.all()
    
    context = {
        'course': course,
        'instructors': instructors,
    }
    
    return render(request, 'administration/flames/edit_course.html', context)


@login_required
def admin_toggle_course_status(request):
    """
    Toggle a course's active status
    """
    course_id = request.POST.get('course_id')
    
    try:
        course = get_object_or_404(FlamesCourse, id=course_id)
        course.is_active = not course.is_active
        course.save()
        
        return JsonResponse({
            'status': 'success',
            'is_active': course.is_active,
            'message': 'Course status updated'
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        })


@login_required
def admin_registrations_ajax(request):
    """
    AJAX endpoint for getting filtered registrations data
    """
    # Get filter parameters
    status_filter = request.GET.get('status', None)
    course_filter = request.GET.get('course', None)
    mode_filter = request.GET.get('mode', None)
    search_query = request.GET.get('search', None)
    college_filter = request.GET.get('college', None)
    
    # Start with all registrations
    registrations = FlamesRegistration.objects.all().select_related('course', 'user', 'team')
    
    # Apply filters
    if status_filter and status_filter != 'all':
        registrations = registrations.filter(status=status_filter)
        
    if course_filter and course_filter != 'all':
        registrations = registrations.filter(course_id=course_filter)
        
    if mode_filter and mode_filter != 'all':
        registrations = registrations.filter(registration_mode=mode_filter)
        
    if college_filter and college_filter != 'all':
        registrations = registrations.filter(user__college=college_filter)
    
    # Search functionality
    if search_query:
        # Search across relevant fields
        registrations = registrations.filter(
            Q(student__first_name__icontains=search_query) | 
            Q(student__last_name__icontains=search_query) |
            Q(student__email__icontains=search_query) |
            Q(student__phone__icontains=search_query) |
            Q(payment_id__icontains=search_query) |
            Q(admin_notes__icontains=search_query)
        )
    
    # Prepare data for datatable
    data = []
    for reg in registrations:
        # Get user info safely
        name = f"{reg.student.first_name} {reg.student.last_name}" if reg.student else "N/A"
        email = reg.student.email if reg.student else "N/A"
        phone = reg.student.phone if reg.student else "N/A"
        college = reg.student.college if reg.student else "N/A"
        
        # Handle team info
        team_info = {}
        if reg.registration_mode == 'TEAM' and reg.team:
            team_members = []
            team_member_objects = FlamesTeamMember.objects.filter(team=reg.team)
            
            for member in team_member_objects:
                member_info = {
                    'name': member.name,
                    'email': member.email,
                    'phone': member.phone,
                    'verified': member.is_verified
                }
                team_members.append(member_info)
            
            team_info = {
                'name': reg.team.name,
                'leader': reg.team.leader.username if reg.team.leader else "N/A",
                'members': team_members,
                'member_count': len(team_members)
            }
        
        # Status class for styling
        status_class = ""
        if reg.status == "COMPLETED":
            status_class = "text-success"
        elif reg.status == "PENDING":
            status_class = "text-warning"
        elif reg.status == "APPROVED":
            status_class = "text-info"
        else:
            status_class = "text-danger"
        
        # Payment information
        payment_info = {
            'method': reg.payment_method or 'N/A',
            'id': reg.payment_id or 'N/A',
            'amount': float(reg.payable_amount) if reg.payable_amount else 0,
            'status': reg.payment_status or 'N/A'
        }
        
        # Format data for each row
        reg_data = {
            'id': reg.id,
            'name': name,
            'email': email,
            'phone': phone,
            'course': reg.course.title,
            'course_id': reg.course.id,
            'status': reg.status,
            'status_class': status_class,
            'college': college,
            'mode': reg.registration_mode,
            'team': team_info,
            'payment': payment_info,
            'created_at': reg.created_at.strftime('%d %b %Y, %I:%M %p'),
            'payment_id': reg.payment_id or 'N/A',
            'admin_notes': reg.admin_notes or ''
        }
        
        data.append(reg_data)
    
    return JsonResponse({
        'data': data
    })


@login_required
def admin_registration_details(request):
    """
    Get registration details for modal view
    """
    reg_id = request.GET.get('id')
    
    try:
        registration = get_object_or_404(FlamesRegistration, id=reg_id)
        
        # Get user info safely
        student = registration.student
        name = f"{student.first_name} {student.last_name}" if student else "N/A"
        email = student.email if student else "N/A"
        phone = student.phone if student else "N/A"
        college = student.college if student else "N/A"
        year = student.year if student else "N/A"
        
        # Handle team info
        team_info = {}
        if registration.registration_mode == 'TEAM' and registration.team:
            team_members = []
            team_member_objects = FlamesTeamMember.objects.filter(team=registration.team)
            
            for member in team_member_objects:
                member_info = {
                    'name': member.name,
                    'email': member.email,
                    'phone': member.phone,
                    'verified': member.is_verified
                }
                team_members.append(member_info)
            
            team_info = {
                'name': registration.team.name,
                'leader': registration.team.leader.username if registration.team.leader else "N/A",
                'members': team_members,
                'member_count': len(team_members)
            }
        
        # Payment information
        payment_info = {
            'method': registration.payment_method or 'N/A',
            'id': registration.payment_id or 'N/A',
            'amount': float(registration.payable_amount) if registration.payable_amount else 0,
            'status': registration.payment_status or 'N/A',
            'original_price': float(registration.original_price) if registration.original_price else 0,
            'discount_price': float(registration.discounted_price) if registration.discounted_price else 0,
        }
        
        # Referral information
        actual_discount = 0
        if registration.referral_code:
            if registration.referral_code.referral_type == 'PERCENTAGE':
                actual_discount = (float(registration.original_price) * float(registration.referral_code.discount_amount) / 100)
            else:
                actual_discount = float(registration.referral_code.discount_amount)
            
            referral_info = {
                'code': registration.referral_code.code,
                'type': registration.referral_code.referral_type,
                'discount_amount': float(registration.referral_code.discount_amount) if registration.referral_code.discount_amount else 0,
                'actual_discount_amount': actual_discount,
                'is_active': registration.referral_code.is_active,
                'is_referral': True
            }
        else:
            referral_info = {
                'is_referral': False
            }
        
        data = {
            'id': registration.id,
            'name': name,
            'email': email,
            'phone': phone,
            'course_title': registration.course.title,
            'college': college,
            'year': year,
            'message': registration.message or '',
            'status': registration.status,
            'registration_mode': registration.registration_mode,
            'admin_notes': registration.admin_notes or '',
            'created_at': registration.created_at.strftime('%d %b %Y, %I:%M %p'),
            'updated_at': registration.updated_at.strftime('%d %b %Y, %I:%M %p') if registration.updated_at else '',
            'team': team_info,
            'payment': payment_info,
            'referral': referral_info,
            'payment_id': registration.payment_id or 'N/A',
            'payable_amount': float(registration.payable_amount) if registration.payable_amount else 
                              float(registration.discounted_price) if registration.discounted_price else 
                              float(registration.original_price)
        }
        
        return JsonResponse({
            'status': 'success',
            'data': data
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        })


@login_required
@require_POST
def admin_update_registration_status(request):
    """
    Update a registration's status
    """
    reg_id = request.POST.get('id')
    status = request.POST.get('status')
    
    try:
        registration = get_object_or_404(FlamesRegistration, id=reg_id)
        registration.status = status
        registration.save()
        
        return JsonResponse({
            'status': 'success',
            'message': f'Registration status updated to {status}'
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        })


@login_required
@require_POST
def admin_update_registration_notes(request):
    """
    Update admin notes for a registration
    """
    reg_id = request.POST.get('id')
    notes = request.POST.get('notes')
    
    try:
        registration = get_object_or_404(FlamesRegistration, id=reg_id)
        registration.admin_notes = notes
        registration.save()
        
        return JsonResponse({
            'status': 'success',
            'message': 'Notes updated successfully'
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        })


@login_required
@require_POST
def admin_add_testimonial(request):
    """
    Add a testimonial for a course
    """
    course_id = request.POST.get('course_id')
    student_name = request.POST.get('student_name')
    rating = request.POST.get('rating')
    content = request.POST.get('content')
    
    try:
        course = get_object_or_404(FlamesCourse, id=course_id)
        
        testimonial = FlamesCourseTestimonial.objects.create(
            course=course,
            student_name=student_name,
            rating=rating,
            content=content
        )
        
        return JsonResponse({
            'status': 'success',
            'message': 'Testimonial added successfully'
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }) 


@login_required
def admin_flames_emails(request):
    """
    View for sending bulk emails to FLAMES registrants
    """
    courses = FlamesCourse.objects.all()
    registrations = FlamesRegistration.objects.all().select_related('course', 'student')
    
    # Get registration statistics
    total_recipients = registrations.count()
    completed_registrations = registrations.filter(status='COMPLETED').count()
    pending_registrations = registrations.filter(status='PENDING').count()
    solo_registrations = registrations.filter(registration_mode='SOLO').count()
    team_registrations = registrations.filter(registration_mode='TEAM').count()
    
    if request.method == 'POST':
        # Get email data from form
        course_filter = request.POST.get('course_filter')
        status_filter = request.POST.get('status_filter')
        registration_mode = request.POST.get('registration_mode')
        email_subject = request.POST.get('email_subject')
        email_content = request.POST.get('email_content')
        send_test = request.POST.get('send_test') == 'on'
        
        # Filter recipients based on selection
        recipients = FlamesRegistration.objects.all().select_related('course', 'student')
        
        if course_filter and course_filter != 'all':
            recipients = recipients.filter(course_id=course_filter)
            
        if status_filter and status_filter != 'all':
            recipients = recipients.filter(status=status_filter)
            
        if registration_mode and registration_mode != 'all':
            recipients = recipients.filter(registration_mode=registration_mode)
        
        # Send test email to admin if requested
        if send_test:
            admin_email = request.user.email
            admin_name = f"{request.user.first_name} {request.user.last_name}"
            course_name = "Test Course"
            
            # Send a test email
            html_content = email_content.replace('{{name}}', admin_name)
            html_content = html_content.replace('{{course_info}}', f'<p style="font-size: 16px; color: #ff6b35;"><strong>Course: {course_name}</strong></p>')
            
            send_flames_email(admin_email, admin_name, email_subject, html_content)
            
            messages.success(request, f"Test email sent to {admin_email}")
            return redirect('admin_flames_emails')
        
        # Send real emails to all recipients
        sent_count = 0
        error_count = 0
        
        for registration in recipients:
            if registration.student and registration.student.email:
                student_email = registration.student.email
                student_name = f"{registration.student.first_name} {registration.student.last_name}"
                course_name = registration.course.title
                
                # Prepare course information including pricing details based on registration mode
                price_info = ""
                if registration.registration_mode == 'TEAM':
                    # Special team pricing calculation: (course price * 5) - (499 * 5)
                    original = int(registration.course.price) * 5
                    discount = 499 * 5
                    team_price = original - discount
                    price_info = f"Team Registration: ₹{team_price} (Team of 5, includes discount of ₹{discount})"
                else:
                    price_info = f"Solo Registration: ₹{registration.payable_amount}"
                
                # Replace placeholders
                html_content = email_content.replace('{{name}}', student_name)
                course_info_html = f'<p style="font-size: 16px; color: #ff6b35;"><strong>Course: {course_name}</strong></p>'
                course_info_html += f'<p style="font-size: 14px; color: #ff6b35;">{price_info}</p>'
                html_content = html_content.replace('{{course_info}}', course_info_html)
                
                try:
                    send_flames_email(student_email, student_name, email_subject, html_content)
                    sent_count += 1
                except Exception as e:
                    print(f"Error sending email to {student_email}: {str(e)}")
                    error_count += 1
        
        messages.success(request, f"Successfully sent {sent_count} emails with {error_count} errors.")
        return redirect('admin_flames_emails')
    
    context = {
        'courses': courses,
        'total_recipients': total_recipients,
        'completed_registrations': completed_registrations,
        'pending_registrations': pending_registrations,
        'solo_registrations': solo_registrations,
        'team_registrations': team_registrations,
    }
    
    return render(request, 'administration/flames/send_emails.html', context)


@login_required
def admin_count_flames_email_recipients(request):
    """
    Count recipients based on filter criteria
    """
    course_filter = request.GET.get('course_filter')
    status_filter = request.GET.get('status_filter')
    registration_mode = request.GET.get('registration_mode')
    
    # Start with all registrations
    recipients = FlamesRegistration.objects.all().select_related('student')
    
    # Apply filters
    if course_filter and course_filter != 'all':
        recipients = recipients.filter(course_id=course_filter)
        
    if status_filter and status_filter != 'all':
        recipients = recipients.filter(status=status_filter)
        
    if registration_mode and registration_mode != 'all':
        recipients = recipients.filter(registration_mode=registration_mode)
    
    # Count valid recipients (those with an email)
    valid_recipients = 0
    for registration in recipients:
        if registration.student and registration.student.email:
            valid_recipients += 1
    
    return JsonResponse({
        'success': True,
        'count': valid_recipients
    })


def send_flames_email(to, name, subject, html_content):
    """
    Helper function to send a formatted FLAMES email
    """
    from_email = 'noreply@theangaarbatch.in'
    to_email = [to]
    
    from_name = "The Angaar Batch"
    from_email_full = f"{from_name} <{from_email}>"

    email = EmailMultiAlternatives(subject, '', from_email_full, to_email)
    email.attach_alternative(html_content, 'text/html')
    email.send()
    
    print(f"FLAMES EMAIL SENT! to {to_email}")
