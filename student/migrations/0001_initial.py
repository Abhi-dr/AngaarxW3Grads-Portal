# Generated by Django 4.2.22 on 2025-06-17 07:01

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('description', models.TextField(max_length=500)),
                ('thumbnail', models.ImageField(blank=True, help_text='Course thumbnail image', null=True, upload_to='course_images/')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('instructors', models.ManyToManyField(blank=True, related_name='courses', to='accounts.instructor')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HackathonTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('members_limit', models.PositiveIntegerField(default=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(unique=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('closed', 'Closed')], default='open', max_length=20)),
                ('required_skills', models.JSONField(default=list)),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_teams', to='accounts.student')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_fixed', models.BooleanField(default=False)),
                ('is_alert', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('danger', 'Danger'), ('success', 'Success')], default='info', max_length=20)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('timeStamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('timeStamp', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.student')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='course_sheets/thumbnails/')),
                ('custom_order', models.JSONField(default=dict)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('course', models.ManyToManyField(blank=True, related_name='course_sheets', to='student.course')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_sheets', to='accounts.instructor')),
            ],
            options={
                'verbose_name': 'Course Sheet',
                'verbose_name_plural': 'Course Sheets',
            },
        ),
        migrations.CreateModel(
            name='CourseRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Approved', 'Approved'), ('Pending', 'Pending'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='student.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.student')),
            ],
            options={
                'verbose_name': 'Course Registration',
                'verbose_name_plural': 'Course Registrations',
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField()),
                ('assignment_type', models.CharField(choices=[('Coding', 'Coding'), ('Text', 'Text'), ('File', 'File'), ('Image', 'Image'), ('Link', 'Link')], db_index=True, max_length=10)),
                ('due_date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('max_score', models.PositiveIntegerField(default=100)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Published', 'Published'), ('Archived', 'Archived')], db_index=True, default='Draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('instructions', models.TextField(blank=True, help_text='Detailed instructions for students')),
                ('allow_late_submission', models.BooleanField(default=False)),
                ('late_penalty_per_day', models.DecimalField(decimal_places=2, default=0, help_text='Percentage penalty per day (0-100)', max_digits=5)),
                ('evaluation_script', models.TextField(blank=True, help_text='Python script for automated evaluation (if applicable)', null=True)),
                ('downloadable_file', models.FileField(blank=True, help_text='Allowed formats: PDF, DOC, DOCX, ZIP, TXT, PY, JS, HTML, CSS', null=True, upload_to='assignments/files/%Y/%m/')),
                ('is_tutorial', models.BooleanField(default=False)),
                ('content', models.TextField(blank=True, null=True)),
                ('tutorial_link', models.URLField(blank=True, help_text='Link to the tutorial video', null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('course_sheets', models.ManyToManyField(blank=True, related_name='assignments', to='student.coursesheet')),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Anonymous_Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('reply', models.TextField(blank=True, null=True)),
                ('is_replied', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('replied_at', models.DateTimeField(blank=True, null=True)),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.instructor')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.student')),
            ],
        ),
        migrations.CreateModel(
            name='AIQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructor', models.CharField(default='None', max_length=255)),
                ('question', models.TextField(blank=True, null=True)),
                ('answer', models.TextField(blank=True, null=True)),
                ('asked_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.student')),
            ],
            options={
                'verbose_name': 'AI Question',
                'verbose_name_plural': 'AI Questions',
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_memberships', to='accounts.student')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='student.hackathonteam')),
            ],
            options={
                'unique_together': {('team', 'student')},
            },
        ),
        migrations.CreateModel(
            name='TeamInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_invites', to='accounts.student')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_invites', to='student.hackathonteam')),
            ],
            options={
                'unique_together': {('team', 'student', 'status')},
            },
        ),
        migrations.CreateModel(
            name='JoinRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_requests', to='accounts.student')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='join_requests', to='student.hackathonteam')),
            ],
            options={
                'unique_together': {('team', 'student', 'status')},
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_text', models.TextField(blank=True)),
                ('submission_file', models.FileField(blank=True, help_text='Allowed formats: PDF, DOC, DOCX, ZIP, TXT, PY, JS, HTML, CSS', upload_to='assignments/files/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'zip', 'txt', 'py', 'js', 'html', 'css'])])),
                ('submission_image', models.ImageField(blank=True, help_text='Allowed formats: JPG, JPEG, PNG, GIF, WEBP', upload_to='assignments/images/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('submission_code', models.TextField(blank=True)),
                ('submission_link', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected')], db_index=True, default='Pending', max_length=20)),
                ('score', models.PositiveIntegerField(blank=True, help_text="Score out of assignment's max_score", null=True)),
                ('feedback', models.TextField(blank=True, help_text='Instructor feedback')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('extra_info', models.TextField(blank=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='student.assignment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment_submissions', to='accounts.student')),
            ],
            options={
                'verbose_name': 'Assignment Submission',
                'verbose_name_plural': 'Assignment Submissions',
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['status', 'submitted_at'], name='student_ass_status_cf1b9a_idx'), models.Index(fields=['assignment', 'status'], name='student_ass_assignm_bfa2ac_idx')],
                'unique_together': {('assignment', 'student')},
            },
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['content_type', 'object_id'], name='student_ass_content_20ea42_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['due_date', 'status'], name='student_ass_due_dat_79f4af_idx'),
        ),
    ]
